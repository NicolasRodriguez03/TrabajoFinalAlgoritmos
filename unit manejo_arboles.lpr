unit ;

interface
  procedure leer_clave(var x:string; var clave:string);
  PROCEDURE CARGAR_ARBOL(VAR ARBOL:T_PUNT);
  PROCEDURE BUSCAR (ARBOL:T_PUNT);
  PROCEDURE CONSULTA (ARBOL:T_PUNT);
  PROCEDURE MUESTRA_DATOS (POS: T_PUNT);
  PROCEDURE INORDEN( VAR ARBOL:T_PUNT);
  FUNCTION PREORDEN( ARBOL:T_PUNT;BUSCADO:CHAR):T_PUNT;
  PROCEDURE AGREGAR_NODO (VAR ARBOL:T_PUNT);
  PROCEDURE LISTAR (ARBOL:T_PUNT);

implementation
    procedure leer_clave(var x:string; var clave:string);
    begin
    Writeln ('Desea buscar por NOMBRE o DNI?')
    Readln (x);
    Writeln ('Ingrese CLAVE');
    Readln (CLAVE);
    end;

PROCEDURE BUSCAR(var encontrado:boolean; var pos:integer);
VAR 
  AUX
begin
  leer_clave(x,clave);
  If (x=nombre) or (x=NOMBRE) or (x=Nombre) then
    AUX:= PREORDEN(ARBOL_AYN, CLAVE);
    IF AUX<>NIL THEN
      encontrado:= TRUE;
      POS:= AUX^.INFO.POS_ARCH;
    ELSE 
      encontrado:= FALSE;
  else
    PREORDEN(ARBOL_DNI, CLAVE);
    IF AUX<>NIL THEN
      encontrado:= TRUE;
      POS:= AUX^.INFO.POS_ARCH;
    ELSE 
      encontrado:= FALSE;
end;

PROCEDURE AGREGAR_NODO (VAR ARBOL:T_PUNT);
VAR
X:CHAR;
BEGIN
CLRSCR;
WRITE ('INGRESE DATO: ');
READLN (X);
AGREGAR(ARBOL, X);
end;

PROCEDURE MUESTRA_DATOS (POS: T_PUNT);
BEGIN
WRITELN (POS^.INFO)
END;

PROCEDURE CARGAR_ARBOL(VAR ARBOL:T_PUNT);
VAR CAR,TECLA: CHAR;
BEGIN
CLRSCR;
WRITE ('INGRESA? PRESIONE N PARA SALIR: ');
READLN (TECLA);
WHILE NOT (ARBOL_LLENO (ARBOL)) AND (TECLA<> 'N') DO
BEGIN
CLRSCR;
WRITE ('INGRESA CARACTER: ');
READLN (CAR);
AGREGAR (ARBOL,CAR);
WRITE ('CONTINUA? PRESIONE N PARA SALIR: ');
READLN (TECLA);
end;
END;

PROCEDURE CONSULTA (ARBOL:T_PUNT);
VAR POS:T_PUNT; CAR:T_DATO;
BEGIN
WRITE('BUSCAR: ');
READLN (CAR);
POS:= PREORDEN (ARBOL,CAR);
IF POS = NIL THEN WRITELN ('NO SE ENCUENTRA' )
ELSE MUESTRA_DATOS (POS);
end;

PROCEDURE BUSCAR (ARBOL:T_PUNT);
BEGIN
IF ARBOL_VACIO (ARBOL) THEN WRITE ('ARBOL VACIO')
ELSE CONSULTA(ARBOL);
READKEY
end;

PROCEDURE LISTAR (ARBOL:T_PUNT);
BEGIN
IF NOT ARBOL_VACIO (ARBOL) THEN INORDEN (ARBOL)
ELSE WRITELN ('ARBOL VACIO');
READKEY
END;

FUNCTION PREORDEN(ARBOL:T_PUNT; BUSCADO:STRING[100]):T_PUNT;
BEGIN
IF (ARBOL = NIL) THEN PREORDEN := NIL
ELSE
IF ( ARBOL^.INFO = BUSCADO) THEN
PREORDEN:= ARBOL
ELSE IF ARBOL^.INFO > BUSCADO THEN
PREORDEN := PREORDEN(ARBOL^.H_I,BUSCADO)
ELSE
PREORDEN := PREORDEN(ARBOL^.H_D,BUSCADO)
END;

PROCEDURE INORDEN(VAR ARBOL:T_PUNT);
BEGIN
  IF ARBOL <> NIL THEN BEGIN
    INORDEN (ARBOL^.H_I);
    WRITELN (ARBOL^.INFO);
    INORDEN (ARBOL^.H_D);
  end;
END;

end.